Task 1:

a.)
#include <stdio.h> 
#include <stdlib.h> 
#include <ctype.h> 
#define YES 1 
#define NO 0 

// Token structure definition 
typedef struct { 
    char type[10]; 
    char value[3]; 
} token; 

token newToken(const char *type, const char *value) { 
    token t; 
    snprintf(t.type, sizeof(t.type), "%s", type); 
    snprintf(t.value, sizeof(t.value), "%s", value); 
    return t; 
} 

void retract(char c) { 
    ungetc(c, stdin); 
} 

void fail() { 
    printf("Lexical error: invalid relational operator.\n"); 
    exit(1); 
}

token getRelop() { 
    int state = 0; 
    char c; 
    while (YES) { 
        c = getchar(); 
        switch (state) { 
            case 0: 
                if (c == '<') state = 1;  // Look for '<'
                else if (c == '=') state = 5;  // Look for '='
                else if (c == '>') state = 6;  // Look for '>'
                else fail();  // Error if not a relational operator
                break; 

            case 1: 
                if (c == '=') {  // '<='
                    return newToken("relop", "LE"); 
                }
                else if(c == '>'){
                    return newToken("relop","NE");
                    }
                     else {  // '<'
                    retract(c);  // Revert back to '<'
                    return newToken("relop", "LT");
                }

            case 5: 
                return newToken("relop", "EQ");  // '=' by itself (e.g., equality check)

            case 6: 
                if (c == '=') {  // '>='
                    return newToken("relop", "GE");
                } else {  // '>'
                    retract(c);  // Revert back to '>'
                    return newToken("relop", "GT");
                }

            default:
                state = 0; 
                break; 
        }
    } 
} 

int main() { 
    token result = getRelop(); 
    printf("Token Type: %s, Token Value: %s\n", result.type, result.value); 
    return 0; 
}
b.)
token getArithmeticOp() { 
    char c = getchar();
    if (c == '+') return newToken("arithmetic_op", "+");
    else if (c == '-') return newToken("arithmetic_op", "-");
    else if (c == '*') return newToken("arithmetic_op", "*");
    else if (c == '/') return newToken("arithmetic_op", "/");
    else if (c == '%') return newToken("arithmetic_op", "%");
    else fail();  // If it's not an arithmetic operator, report an error
}
c.)
token getAssignmentOp() { 
    char c = getchar();
    if (c == '=') return newToken("assignment_op", "=");
    else fail();  // If it's not an assignment operator, report an error
}
d.)
#include <stdio.h> 
#include <stdlib.h> 
#include <ctype.h> 
#define YES 1 
#define NO 0 

// Token structure definition 
typedef struct { 
    char type[20]; 
    char value[3]; 
} token; 

token newToken(const char *type, const char *value) { 
    token t; 
    snprintf(t.type, sizeof(t.type), "%s", type); 
    snprintf(t.value, sizeof(t.value), "%s", value); 
    return t; 
} 

void retract(char c) { 
    ungetc(c, stdin); 
} 

void fail() { 
    printf("Lexical error.\n"); 
    exit(1); 
}

token getOperatorOrSeparator() { 
    char c = getchar(); 
    if (c == '<' || c == '>' || c == '=') { 
        return getRelop();  // Relational operator
    }
    else if (c == '+' || c == '-' || c == '*' || c == '/' || c == '%') { 
        return getArithmeticOp();  // Arithmetic operator
    }
    else if (c == ';' || c == ',' || c == '(' || c == ')') { 
        return newToken("separator", (char[]){c, '\0'});  // Separator
    }
    else if (c == '=') { 
        return getAssignmentOp();  // Assignment operator
    }
    else fail();  // Error if the character doesn't match any known operator or separator
}

int main() { 
    token result = getOperatorOrSeparator(); 
    printf("Token Type: %s, Token Value: %s\n", result.type, result.value); 
    return 0; 
}
TASK 2:
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define YES 1
#define NO 0

// Token structure definition
typedef struct {
    char type[20];
    char value[20];
} token;

token newToken(const char *type, const char *value) {
    token t;
    snprintf(t.type, sizeof(t.type), "%s", type);
    snprintf(t.value, sizeof(t.value), "%s", value);
    return t;
}

void retract(char c) {
    ungetc(c, stdin);
}

void fail() {
    printf("Lexical error.\n");
    exit(1);
}

// Function to recognize signed integers and real numbers
token getNum() {
    int state = 0;
    char c;
    char numBuffer[20];
    int index = 0;

    while (YES) {
        c = getchar();
        
        switch (state) {
            case 0: // Start state, looking for optional sign or digit
                if (c == '+' || c == '-') { // Signed number
                    numBuffer[index++] = c; // Store the sign
                    state = 1;
                } else if (isdigit(c)) { // Directly a number
                    numBuffer[index++] = c;
                    state = 2;
                } else {
                    fail(); // Invalid character
                }
                break;

            case 1: // After sign, expect digits
                if (isdigit(c)) {
                    numBuffer[index++] = c;
                    state = 2;
                } else {
                    fail(); // Invalid character after sign
                }
                break;

            case 2: // After first digit(s), looking for decimal point or end of number
                if (isdigit(c)) { // More digits, continue
                    numBuffer[index++] = c;
                } else if (c == '.') { // Decimal point, start recognizing real number
                    numBuffer[index++] = c;
                    state = 4;
                } else { // End of integer number
                    retract(c); // Retract the non-numeric character
                    numBuffer[index] = '\0'; // Terminate the string
                    return newToken("Integer", numBuffer); // Return as integer token
                }
                break;
            case 3:
            	retract(c);
            	return newToken("Integer", "INT");
            	
            case 4: // After decimal point, expect more digits (real number)
                if (isdigit(c)) {
                    numBuffer[index++] = c;
                    state = 5; // Continue in real number state
                } else {
                    fail(); // Invalid character after decimal point
                }
                break;

            case 4: // After decimal digits, looking for more digits or end of number
                if (isdigit(c)) {
                    numBuffer[index++] = c; // More digits in real number
                } else { // End of real number
                    retract(c); // Retract the non-numeric character
                    numBuffer[index] = '\0'; // Terminate the string
                    return newToken("Real num", "FLOAT"); // Return as real number token
                }
                break;

            default:
                fail(); // Invalid state
        }
    }
}

int main() {
    token result = getNum();
    printf("Token Type: %s, Token Value: %s\n", result.type, result.value);
    return 0;
}
task 3:
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define YES 1
#define NO 0

// Token structure definition
typedef struct {
    char type[20];
    char value[20];
} token;

token newToken(const char *type, const char *value) {
    token t;
    snprintf(t.type, sizeof(t.type), "%s", type);
    snprintf(t.value, sizeof(t.value), "%s", value);
    return t;
}

void retract(char c) {
    ungetc(c, stdin); // Retract the last character read
}

void fail() {
    printf("Lexical error: Not started with lowercase alphabet\n");
    exit(1);
}

int main() {
    token result = getId();
    printf("Token Type: %s, Token Value: %s\n", result.type, result.value);
    return 0;
}